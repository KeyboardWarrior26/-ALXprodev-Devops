#!/bin/bash

# List of Pokémon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Log file to track failures
log_file="errors.log"
> "$log_file"  # Clear log

# Temp directory for individual outputs
mkdir -p output

# Timeout duration (optional)
timeout=10

# Function to fetch a single Pokémon's data
fetch_pokemon() {
    name=$1
    file="output/${name}.txt"

    # Timeout per process, kill if takes too long
    {
        response=$(curl -s "https://pokeapi.co/api/v2/pokemon/$name")
        if [ -n "$response" ]; then
            pname=$(echo "$response" | jq -r '.name' | sed 's/.*/\u&/')
            ptype=$(echo "$response" | jq -r '.types[0].type.name' | sed 's/.*/\u&/')
            weight=$(echo "$response" | jq '.weight' | awk '{printf "%.1f", $1/10}')
            height=$(echo "$response" | jq '.height' | awk '{printf "%.1f", $1/10}')

            echo "$pname is of type $ptype, weighs ${weight}kg, and is ${height}m tall." > "$file"
        else
            echo "Failed to fetch data for $name" >> "$log_file"
        fi
    } &
    echo $!  # Return PID
}

# Array to keep PIDs
pids=()

# Start parallel fetches
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon"
    pids+=($!)
done

# Wait for all to complete with timeout check
start_time=$(date +%s)

for pid in "${pids[@]}"; do
    wait $pid 2>/dev/null &
done

wait

# Combine outputs
cat output/*.txt

# Clean up
rm -rf output

